plugins {
    id 'java'
    id 'checkstyle'
    id 'application'
}

repositories {
    mavenCentral()
}

application {
    mainClass = 'org.example.Main'
}

// Optional: Create a "fat JAR" (executable JAR) to easily distribute the app.
jar {
    manifest {
        attributes(
                'Main-Class': 'org.example.Main '
        )
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

checkstyle {
    toolVersion = '10.12.4'
    configFile = file('config/checkstyle/checkstyle.xml')
}

tasks.named('run') {
    standardInput = System.in
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}
tasks.register('createJreWindows', Exec) {
    dependsOn 'classes' craJreLin
    def jdkHome = System.getenv('JAVA_HOME')

    if (jdkHome == null) {
        throw new GradleException("JAVA_HOME is not set. Please ensure JDK 17+ is installed.")
    }

    commandLine "$jdkHome/bin/jlink",
            '--module-path', "$jdkHome/jmods",
            '--add-modules', 'java.base,java.logging',
            '--output', "${buildDir}/custom-jre/windows",
            '--no-header-files', '--no-man-pages', '--compress=2'
}

tasks.register('createJreLinux', Exec) {
    dependsOn 'classes'
    def jdkHome = System.getenv('JAVA_HOME')

    if (jdkHome == null) {
        throw new GradleException("JAVA_HOME is not set. Please ensure JDK 17+ is installed.")
    }

    commandLine "$jdkHome/bin/jlink",
            '--module-path', "$jdkHome/jmods",
            '--add-modules', 'java.base,java.logging',
            '--output', "${buildDir}/custom-jre/linux",
            '--no-header-files', '--no-man-pages', '--compress=2'
}


group = 'org.example'
version = '0.0.1-alpha'

repositories {
    mavenCentral()
}

dependencies {
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

distributions {
    main {
        contents {
            from('README.md') // Optional: include additional files

            // Include Windows JRE
            into('lib/jre/windows') {
                from "${buildDir}/custom-jre/windows"
            }

            // Include Linux JRE
            into('lib/jre/linux') {
                from "${buildDir}/custom-jre/linux"
            }
        }
    }
}